- create venv: file>new project

- set python interpreter

- pip3 install 'django<4'

- django-admin startproject drf_api .

- create configuration for py manage.py runserver

- pip install django-cloudinary-storage

- pip install Pillow

- settings.py
    'cloudinary_storage',
    'django.contrib.staticfiles',
    'cloudinary',

- PP_4>Creating empty django project in PyCharm:
pip install dj_database_url==0.5.0 psycopg2 python-dotenv gunicorn

- .gitignore
.env
venv/
db.sqlite3
screenshots/

- .env
SECRET_KEY=django-insecure-*ul7)(f)fmtschtlt2+lk%a2&+4nu_(0k=x-xt+id==j+cli+r
CLOUDINARY_URL=cloudinary://737149144531711:18GdTVW7o4QgXQT09WmMxndlhOs@dkglcxx4y

- settings.py
from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url
# Load environment variables from .env file
load_dotenv()
(at the very top, after importing)
CLOUDINARY_STORAGE = {'CLOUDINARY_URL': os.environ.get('CLOUDINARY_URL')}
MEDIA_URL = '/media/'
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

- settings.py
SECRET_KEY = os.environ.get('SECRET_KEY')

- git init

- pip freeze requirements.txt

- py manage.py startapp profiles

- settings.py
'profiles',

- profiles/models>create Profile model

- Create signal:
You can think of signals as notifications that  get triggered by an event. We can
listen for such Model events and have some code, usually a  function, run each time
that signal is received.
In our case, we would want to be notified when a user is created so that a profile
can  automatically be created alongside it.
[profiles/models.py]
<def create_profile(...)>
<post_save.connect(create_profile, sender=User)>

- register Profile in profile>admin

- python manage.py makemigrations
- python manage.py migrate

- py manage.py createsuperuser

- pip install django djangorestframework

- settings.py
'rest_framework',

- pip freeze > requirements.txt

- [profiles/views]
create ProfileList view with get()

- Create path for ProfileList
[drf/... and profiles/... urls]

- create ProfileSerializer
setup owner field with dot notation to get username
<owner = serializers.ReadOnlyField(source='owner.username')>

- Add ProfileSerializer to ProfileList

- Create ProfileDetail view:
get_object>get()

- [profiles/urls]
<path('profiles/<int:pk>/', views.ProfileDetail.as_view())>

- Add put method to ProfileDetail view

- Add form for editing profile details
<serializer_class = ProfileSerializer>

- Add in-browser login, logout
[drf_api/urls]
<path('api-auth/', include('rest_framework.urls')),>

- Writing custom permission IsOwnerOrReadOnly
Predefined permissions:
AllowAny, IsAuthenticated,  IsAdminUser and more;
Custom permissions (BasePermission - to write cp):
in our case it's an object-level permission -
we have to check the profile model instance object so that it's owner field was the same
as user, who makes the request
[drf_api/permissions]
[profiles/views>ProfileDetail>get_object()]
=> only logged_in users can update their profile

- Add an extra field "is_owner" to ProfileSerializer
[profiles/serializers]
<is_owner = serializers.SerializerMethodField()>
<def get_is_owner(self, obj): ...>
<user = self.context['request'].user>

- Create posts app, Post model and PostSerializer with custom fields

- Add choice of image filters ("image_filter" field) and images upload validation

- create PostList view with get and post methods

- add permission to the view to allow only authenticated user to create the post

- create posts>urls.py for PostList view

- create PostDetail view with get and put and delete methods




- create Comments using generic API views

























- py manage.py startapp articles

- add app to settings.py
